### This file was generated by Nexus Schema
### Do not make changes to this file directly


type About {
  body: String
  createdAt: DateTime
  documentId: ID!
  publishedAt: DateTime
  title: String
  updatedAt: DateTime
}

type AboutEntity {
  attributes: About
  id: ID
}

type AboutEntityResponse {
  data: About
}

type AboutEntityResponseCollection {
  nodes: [About!]!
  pageInfo: Pagination!
}

input AboutFiltersInput {
  and: [AboutFiltersInput]
  body: StringFilterInput
  createdAt: DateTimeFilterInput
  not: AboutFiltersInput
  or: [AboutFiltersInput]
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input AboutInput {
  body: String
  publishedAt: DateTime
  title: String
}

type AboutRelationResponseCollection {
  nodes: [About!]!
}

input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  nei: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type ComponentSharedAddress {
  address_0: String
  address_1: String
  city: String
  country: ENUM_COMPONENTSHAREDADDRESS_COUNTRY
  id: ID!
  postal_code: String
}

input ComponentSharedAddressFiltersInput {
  address_0: StringFilterInput
  address_1: StringFilterInput
  and: [ComponentSharedAddressFiltersInput]
  city: StringFilterInput
  country: StringFilterInput
  not: ComponentSharedAddressFiltersInput
  or: [ComponentSharedAddressFiltersInput]
  postal_code: StringFilterInput
}

input ComponentSharedAddressInput {
  address_0: String
  address_1: String
  city: String
  country: ENUM_COMPONENTSHAREDADDRESS_COUNTRY
  id: ID
  postal_code: String
}

type ComponentSharedCooking {
  id: ID!
  info_box: InfoBox
  method: ENUM_COMPONENTSHAREDCOOKING_METHOD!
  value: String
}

type ComponentSharedCookingAlternative {
  id: ID!
  info_box: InfoBox
  method: ENUM_COMPONENTSHAREDCOOKINGALTERNATIVE_METHOD!
  value: String
}

input ComponentSharedCookingAlternativeFiltersInput {
  and: [ComponentSharedCookingAlternativeFiltersInput]
  info_box: InfoBoxFiltersInput
  method: StringFilterInput
  not: ComponentSharedCookingAlternativeFiltersInput
  or: [ComponentSharedCookingAlternativeFiltersInput]
  value: StringFilterInput
}

input ComponentSharedCookingAlternativeInput {
  id: ID
  info_box: ID
  method: ENUM_COMPONENTSHAREDCOOKINGALTERNATIVE_METHOD
  value: String
}

input ComponentSharedCookingFiltersInput {
  and: [ComponentSharedCookingFiltersInput]
  info_box: InfoBoxFiltersInput
  method: StringFilterInput
  not: ComponentSharedCookingFiltersInput
  or: [ComponentSharedCookingFiltersInput]
  value: StringFilterInput
}

input ComponentSharedCookingInput {
  id: ID
  info_box: ID
  method: ENUM_COMPONENTSHAREDCOOKING_METHOD
  value: String
}

type ComponentSharedCookingInstructions {
  body: JSON
  id: ID!
  title: String
}

input ComponentSharedCookingInstructionsFiltersInput {
  and: [ComponentSharedCookingInstructionsFiltersInput]
  body: JSONFilterInput
  not: ComponentSharedCookingInstructionsFiltersInput
  or: [ComponentSharedCookingInstructionsFiltersInput]
  title: StringFilterInput
}

input ComponentSharedCookingInstructionsInput {
  body: JSON
  id: ID
  title: String
}

type ComponentSharedHealth {
  id: ID!
  list(filters: HealthReasonFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [HealthReason]!
  list_connection(filters: HealthReasonFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): HealthReasonRelationResponseCollection
}

input ComponentSharedHealthFiltersInput {
  and: [ComponentSharedHealthFiltersInput]
  list: HealthReasonFiltersInput
  not: ComponentSharedHealthFiltersInput
  or: [ComponentSharedHealthFiltersInput]
}

input ComponentSharedHealthInput {
  id: ID
  list: [ID]
}

type ComponentSharedIntolerances {
  id: ID!
  list(filters: IntoleranceFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Intolerance]!
  list_connection(filters: IntoleranceFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): IntoleranceRelationResponseCollection
}

input ComponentSharedIntolerancesFiltersInput {
  and: [ComponentSharedIntolerancesFiltersInput]
  list: IntoleranceFiltersInput
  not: ComponentSharedIntolerancesFiltersInput
  or: [ComponentSharedIntolerancesFiltersInput]
}

input ComponentSharedIntolerancesInput {
  id: ID
  list: [ID]
}

type ComponentSharedMedia {
  file: UploadFile
  id: ID!
}

input ComponentSharedMediaFiltersInput {
  and: [ComponentSharedMediaFiltersInput]
  not: ComponentSharedMediaFiltersInput
  or: [ComponentSharedMediaFiltersInput]
}

input ComponentSharedMediaInput {
  file: ID
  id: ID
}

type ComponentSharedNutrient {
  id: ID!
  percentage: Float
  type: ENUM_COMPONENTSHAREDNUTRIENT_TYPE!
  unit: ENUM_COMPONENTSHAREDNUTRIENT_UNIT!
  value: Float!
}

input ComponentSharedNutrientFiltersInput {
  and: [ComponentSharedNutrientFiltersInput]
  not: ComponentSharedNutrientFiltersInput
  or: [ComponentSharedNutrientFiltersInput]
  percentage: FloatFilterInput
  type: StringFilterInput
  unit: StringFilterInput
  value: FloatFilterInput
}

input ComponentSharedNutrientInput {
  id: ID
  percentage: Float
  type: ENUM_COMPONENTSHAREDNUTRIENT_TYPE
  unit: ENUM_COMPONENTSHAREDNUTRIENT_UNIT
  value: Float
}

type ComponentSharedQuote {
  body: String
  id: ID!
  title: String
}

input ComponentSharedQuoteFiltersInput {
  and: [ComponentSharedQuoteFiltersInput]
  body: StringFilterInput
  not: ComponentSharedQuoteFiltersInput
  or: [ComponentSharedQuoteFiltersInput]
  title: StringFilterInput
}

input ComponentSharedQuoteInput {
  body: String
  id: ID
  title: String
}

type ComponentSharedRichText {
  body: String
  id: ID!
}

input ComponentSharedRichTextFiltersInput {
  and: [ComponentSharedRichTextFiltersInput]
  body: StringFilterInput
  not: ComponentSharedRichTextFiltersInput
  or: [ComponentSharedRichTextFiltersInput]
}

input ComponentSharedRichTextInput {
  body: String
  id: ID
}

type ComponentSharedSeo {
  id: ID!
  metaDescription: String!
  metaTitle: String!
  shareImage: UploadFile
}

input ComponentSharedSeoFiltersInput {
  and: [ComponentSharedSeoFiltersInput]
  metaDescription: StringFilterInput
  metaTitle: StringFilterInput
  not: ComponentSharedSeoFiltersInput
  or: [ComponentSharedSeoFiltersInput]
}

input ComponentSharedSeoInput {
  id: ID
  metaDescription: String
  metaTitle: String
  shareImage: ID
}

type ComponentSharedSlider {
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UploadFile]!
  files_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  id: ID!
}

input ComponentSharedSliderFiltersInput {
  and: [ComponentSharedSliderFiltersInput]
  not: ComponentSharedSliderFiltersInput
  or: [ComponentSharedSliderFiltersInput]
}

input ComponentSharedSliderInput {
  files: [ID]
  id: ID
}

type ComponentSharedStorage {
  id: ID!
  info_box: InfoBox
  type: ENUM_COMPONENTSHAREDSTORAGE_TYPE
  unit: ENUM_COMPONENTSHAREDSTORAGE_UNIT
  value: Int
}

input ComponentSharedStorageFiltersInput {
  and: [ComponentSharedStorageFiltersInput]
  info_box: InfoBoxFiltersInput
  not: ComponentSharedStorageFiltersInput
  or: [ComponentSharedStorageFiltersInput]
  type: StringFilterInput
  unit: StringFilterInput
  value: IntFilterInput
}

input ComponentSharedStorageInput {
  id: ID
  info_box: ID
  type: ENUM_COMPONENTSHAREDSTORAGE_TYPE
  unit: ENUM_COMPONENTSHAREDSTORAGE_UNIT
  value: Int
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nei: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  nei: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

type DeleteMutationResponse {
  documentId: ID!
}

enum ENUM_COMPONENTSHAREDADDRESS_COUNTRY {
  Germany
}

enum ENUM_COMPONENTSHAREDCOOKINGALTERNATIVE_METHOD {
  Blanching
  Microwave
  Raw
}

enum ENUM_COMPONENTSHAREDCOOKING_METHOD {
  Bake_Grill
  Cook
  Oven
}

enum ENUM_COMPONENTSHAREDNUTRIENT_TYPE {
  Energy
  Fat
  Protein
  Salt
  Sugar
}

enum ENUM_COMPONENTSHAREDNUTRIENT_UNIT {
  Gram
  Kcal
}

enum ENUM_COMPONENTSHAREDSTORAGE_TYPE {
  Freezer
  Refrigerator
  Room
}

enum ENUM_COMPONENTSHAREDSTORAGE_UNIT {
  Days
  Months
  Weeks
  Years
}

enum ENUM_LOCATION_TYPE {
  bakery
  banquet_hall
  bar
  beach_bar
  bistro
  brewery
  butcher_shop
  cafe
  canteen
  catering_facility
  chocolate_shop
  cooking_studio
  culinary_school
  deli
  dining_hall
  distillery
  event_venue
  farm
  farmers_market
  fish_market
  food_court
  food_distribution_center
  food_festival_location
  food_truck
  food_warehouse
  grocery_store
  hotel_restaurant
  ice_cream_parlor
  orchard
  other
  patisserie
  pop_up_restaurant
  private_dining_room
  restaurant
  rooftop_bar_restaurant
  street_food_stall
  supermarket
  tea_house
  test_kitchen
  vineyard
  winery
}

enum ENUM_PARTNER_TYPE {
  association
  company
  educational_institution
  event
  foundation
  government_agency
  group
  healthcare_institution
  initiative
  institution
  international_organization
  media
  network
  organization
  person
  religious_organization
  volunteer_group
}

enum ENUM_REGION_TYPE {
  City
  County
  District
  Municipality
  National_Park
  Nature_Reserve_or_Protected_Area
  Neighborhood
  Other
  Province
  Town
  Village
}

type Error {
  code: String!
  message: String
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  nei: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

union GenericMorph = About | ComponentSharedAddress | ComponentSharedCooking | ComponentSharedCookingAlternative | ComponentSharedCookingInstructions | ComponentSharedHealth | ComponentSharedIntolerances | ComponentSharedMedia | ComponentSharedNutrient | ComponentSharedQuote | ComponentSharedRichText | ComponentSharedSeo | ComponentSharedSlider | ComponentSharedStorage | Global | HealthReason | I18NLocale | InfoBox | Ingredient | Intolerance | LocalHero | Location | Partner | Recipe | Region | ReviewWorkflowsWorkflow | ReviewWorkflowsWorkflowStage | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type Global {
  createdAt: DateTime
  defaultSeo: ComponentSharedSeo
  documentId: ID!
  favicon: UploadFile
  publishedAt: DateTime
  siteDescription: String!
  siteName: String!
  updatedAt: DateTime
}

type GlobalEntity {
  attributes: Global
  id: ID
}

type GlobalEntityResponse {
  data: Global
}

type GlobalEntityResponseCollection {
  nodes: [Global!]!
  pageInfo: Pagination!
}

input GlobalFiltersInput {
  and: [GlobalFiltersInput]
  createdAt: DateTimeFilterInput
  defaultSeo: ComponentSharedSeoFiltersInput
  not: GlobalFiltersInput
  or: [GlobalFiltersInput]
  publishedAt: DateTimeFilterInput
  siteDescription: StringFilterInput
  siteName: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input GlobalInput {
  defaultSeo: ComponentSharedSeoInput
  favicon: ID
  publishedAt: DateTime
  siteDescription: String
  siteName: String
}

type GlobalRelationResponseCollection {
  nodes: [Global!]!
}

type HealthReason {
  createdAt: DateTime
  documentId: ID!
  is_negative: Boolean
  locale: String
  localizations(filters: HealthReasonFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [HealthReason]!
  localizations_connection(filters: HealthReasonFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): HealthReasonRelationResponseCollection
  publishedAt: DateTime
  title: String
  updatedAt: DateTime
}

type HealthReasonEntity {
  attributes: HealthReason
  id: ID
}

type HealthReasonEntityResponse {
  data: HealthReason
}

type HealthReasonEntityResponseCollection {
  nodes: [HealthReason!]!
  pageInfo: Pagination!
}

input HealthReasonFiltersInput {
  and: [HealthReasonFiltersInput]
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  is_negative: BooleanFilterInput
  locale: StringFilterInput
  localizations: HealthReasonFiltersInput
  not: HealthReasonFiltersInput
  or: [HealthReasonFiltersInput]
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input HealthReasonInput {
  is_negative: Boolean
  publishedAt: DateTime
  title: String
}

type HealthReasonRelationResponseCollection {
  nodes: [HealthReason!]!
}

type I18NLocale {
  code: String
  createdAt: DateTime
  documentId: ID!
  name: String
  publishedAt: DateTime
  updatedAt: DateTime
}

"""A string used to identify an i18n locale"""
scalar I18NLocaleCode

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocale
}

type I18NLocaleEntityResponseCollection {
  nodes: [I18NLocale!]!
  pageInfo: Pagination!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input I18NLocaleInput {
  code: String
  name: String
  publishedAt: DateTime
}

type I18NLocaleRelationResponseCollection {
  nodes: [I18NLocale!]!
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  nei: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

type InfoBox {
  body: JSON
  createdAt: DateTime
  documentId: ID!
  locale: String
  localizations(filters: InfoBoxFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [InfoBox]!
  localizations_connection(filters: InfoBoxFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): InfoBoxRelationResponseCollection
  publishedAt: DateTime
  title: String
  updatedAt: DateTime
}

type InfoBoxEntity {
  attributes: InfoBox
  id: ID
}

type InfoBoxEntityResponse {
  data: InfoBox
}

type InfoBoxEntityResponseCollection {
  nodes: [InfoBox!]!
  pageInfo: Pagination!
}

input InfoBoxFiltersInput {
  and: [InfoBoxFiltersInput]
  body: JSONFilterInput
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  locale: StringFilterInput
  localizations: InfoBoxFiltersInput
  not: InfoBoxFiltersInput
  or: [InfoBoxFiltersInput]
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input InfoBoxInput {
  body: JSON
  publishedAt: DateTime
  title: String
}

type InfoBoxRelationResponseCollection {
  nodes: [InfoBox!]!
}

type Ingredient {
  body: JSON
  carousel: ComponentSharedSlider
  cooking(filters: ComponentSharedCookingFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSharedCooking]
  cooking_alt(filters: ComponentSharedCookingAlternativeFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSharedCookingAlternative]
  cover: UploadFile
  createdAt: DateTime!
  description: String
  documentId: ID!
  favorite_users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UsersPermissionsUser]!
  favorite_users_connection(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  handeling: String
  health: ComponentSharedHealth
  id: ID!
  intolerances: ComponentSharedIntolerances
  locale: String
  localizations(filters: IngredientFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Ingredient]!
  localizations_connection(filters: IngredientFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): IngredientRelationResponseCollection
  nutrients(filters: ComponentSharedNutrientFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSharedNutrient]
  publishedAt: DateTime!
  season: JSON
  shopping: String
  storage(filters: ComponentSharedStorageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSharedStorage]
  title: String!
  updatedAt: DateTime!
}

type IngredientEntity {
  attributes: Ingredient
  id: ID
}

type IngredientEntityResponse {
  data: Ingredient
}

type IngredientEntityResponseCollection {
  nodes: [Ingredient!]!
  pageInfo: Pagination!
}

input IngredientFiltersInput {
  and: [IngredientFiltersInput]
  body: JSONFilterInput
  carousel: ComponentSharedSliderFiltersInput
  cooking: ComponentSharedCookingFiltersInput
  cooking_alt: ComponentSharedCookingAlternativeFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  documentId: IDFilterInput
  favorite_users: UsersPermissionsUserFiltersInput
  handeling: StringFilterInput
  health: ComponentSharedHealthFiltersInput
  intolerances: ComponentSharedIntolerancesFiltersInput
  locale: StringFilterInput
  localizations: IngredientFiltersInput
  not: IngredientFiltersInput
  nutrients: ComponentSharedNutrientFiltersInput
  or: [IngredientFiltersInput]
  publishedAt: DateTimeFilterInput
  season: JSONFilterInput
  shopping: StringFilterInput
  storage: ComponentSharedStorageFiltersInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input IngredientInput {
  body: JSON
  carousel: ComponentSharedSliderInput
  cooking: [ComponentSharedCookingInput]
  cooking_alt: [ComponentSharedCookingAlternativeInput]
  cover: ID
  description: String
  favorite_users: [ID]
  handeling: String
  health: ComponentSharedHealthInput
  intolerances: ComponentSharedIntolerancesInput
  nutrients: [ComponentSharedNutrientInput]
  publishedAt: DateTime
  season: JSON
  shopping: String
  storage: [ComponentSharedStorageInput]
  title: String
}

type IngredientRelationResponseCollection {
  nodes: [Ingredient!]!
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  nei: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

type Intolerance {
  createdAt: DateTime
  documentId: ID!
  locale: String
  localizations(filters: IntoleranceFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Intolerance]!
  localizations_connection(filters: IntoleranceFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): IntoleranceRelationResponseCollection
  publishedAt: DateTime
  title: String
  updatedAt: DateTime
}

type IntoleranceEntity {
  attributes: Intolerance
  id: ID
}

type IntoleranceEntityResponse {
  data: Intolerance
}

type IntoleranceEntityResponseCollection {
  nodes: [Intolerance!]!
  pageInfo: Pagination!
}

input IntoleranceFiltersInput {
  and: [IntoleranceFiltersInput]
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  locale: StringFilterInput
  localizations: IntoleranceFiltersInput
  not: IntoleranceFiltersInput
  or: [IntoleranceFiltersInput]
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input IntoleranceInput {
  publishedAt: DateTime
  title: String
}

type IntoleranceRelationResponseCollection {
  nodes: [Intolerance!]!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  nei: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

type LocalHero {
  body: JSON
  cover: UploadFile
  createdAt: DateTime
  description: String
  documentId: ID!
  location: JSON
  name: String!
  partners(filters: PartnerFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Partner]!
  partners_connection(filters: PartnerFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): PartnerRelationResponseCollection
  plus: Boolean
  publishedAt: DateTime
  reserve_href: String
  updatedAt: DateTime
  website_url: String
}

type LocalHeroEntity {
  attributes: LocalHero
  id: ID
}

type LocalHeroEntityResponse {
  data: LocalHero
}

type LocalHeroEntityResponseCollection {
  nodes: [LocalHero!]!
  pageInfo: Pagination!
}

input LocalHeroFiltersInput {
  and: [LocalHeroFiltersInput]
  body: JSONFilterInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  documentId: IDFilterInput
  location: JSONFilterInput
  name: StringFilterInput
  not: LocalHeroFiltersInput
  or: [LocalHeroFiltersInput]
  partners: PartnerFiltersInput
  plus: BooleanFilterInput
  publishedAt: DateTimeFilterInput
  reserve_href: StringFilterInput
  updatedAt: DateTimeFilterInput
  website_url: StringFilterInput
}

input LocalHeroInput {
  body: JSON
  cover: ID
  description: String
  location: JSON
  name: String
  partners: [ID]
  plus: Boolean
  publishedAt: DateTime
  reserve_href: String
  website_url: String
}

type LocalHeroRelationResponseCollection {
  nodes: [LocalHero!]!
}

type Location {
  address: ComponentSharedAddress
  body: JSON
  createdAt: DateTime
  documentId: ID!
  locale: String
  localizations(filters: LocationFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Location]!
  localizations_connection(filters: LocationFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): LocationRelationResponseCollection
  location: JSON
  name: String!
  partners(filters: PartnerFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Partner]!
  partners_connection(filters: PartnerFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): PartnerRelationResponseCollection
  publishedAt: DateTime
  region: Region
  type: ENUM_LOCATION_TYPE!
  updatedAt: DateTime
}

type LocationEntity {
  attributes: Location
  id: ID
}

type LocationEntityResponse {
  data: Location
}

type LocationEntityResponseCollection {
  nodes: [Location!]!
  pageInfo: Pagination!
}

input LocationFiltersInput {
  address: ComponentSharedAddressFiltersInput
  and: [LocationFiltersInput]
  body: JSONFilterInput
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  locale: StringFilterInput
  localizations: LocationFiltersInput
  location: JSONFilterInput
  name: StringFilterInput
  not: LocationFiltersInput
  or: [LocationFiltersInput]
  partners: PartnerFiltersInput
  publishedAt: DateTimeFilterInput
  region: RegionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input LocationInput {
  address: ComponentSharedAddressInput
  body: JSON
  location: JSON
  name: String
  partners: [ID]
  publishedAt: DateTime
  region: ID
  type: ENUM_LOCATION_TYPE
}

type LocationRelationResponseCollection {
  nodes: [Location!]!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

input LongFilterInput {
  and: [Long]
  between: [Long]
  contains: Long
  containsi: Long
  endsWith: Long
  eq: Long
  eqi: Long
  gt: Long
  gte: Long
  in: [Long]
  lt: Long
  lte: Long
  ne: Long
  nei: Long
  not: LongFilterInput
  notContains: Long
  notContainsi: Long
  notIn: [Long]
  notNull: Boolean
  null: Boolean
  or: [Long]
  startsWith: Long
}

type Mutation {
  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createHealthReason(
    data: HealthReasonInput!

    """The locale to use for the query"""
    locale: I18NLocaleCode
    status: PublicationStatus = PUBLISHED
  ): HealthReason
  createInfoBox(
    data: InfoBoxInput!

    """The locale to use for the query"""
    locale: I18NLocaleCode
    status: PublicationStatus = PUBLISHED
  ): InfoBox
  createIngredient(
    data: IngredientInput!

    """The locale to use for the query"""
    locale: I18NLocaleCode
    status: PublicationStatus = PUBLISHED
  ): Ingredient
  createIntolerance(
    data: IntoleranceInput!

    """The locale to use for the query"""
    locale: I18NLocaleCode
    status: PublicationStatus = PUBLISHED
  ): Intolerance
  createLocalHero(data: LocalHeroInput!, status: PublicationStatus = PUBLISHED): LocalHero
  createLocation(
    data: LocationInput!

    """The locale to use for the query"""
    locale: I18NLocaleCode
    status: PublicationStatus = PUBLISHED
  ): Location
  createPartner(
    data: PartnerInput!

    """The locale to use for the query"""
    locale: I18NLocaleCode
    status: PublicationStatus = PUBLISHED
  ): Partner
  createRecipe(
    data: RecipeInput!

    """The locale to use for the query"""
    locale: I18NLocaleCode
    status: PublicationStatus = PUBLISHED
  ): Recipe
  createRegion(data: RegionInput!, status: PublicationStatus = PUBLISHED): Region
  createReviewWorkflowsWorkflow(data: ReviewWorkflowsWorkflowInput!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflow
  createReviewWorkflowsWorkflowStage(data: ReviewWorkflowsWorkflowStageInput!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStage

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteAbout: DeleteMutationResponse
  deleteGlobal: DeleteMutationResponse
  deleteHealthReason(
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): DeleteMutationResponse
  deleteInfoBox(
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): DeleteMutationResponse
  deleteIngredient(
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): DeleteMutationResponse
  deleteIntolerance(
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): DeleteMutationResponse
  deleteLocalHero(documentId: ID!): DeleteMutationResponse
  deleteLocation(
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): DeleteMutationResponse
  deletePartner(
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): DeleteMutationResponse
  deleteRecipe(
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): DeleteMutationResponse
  deleteRegion(documentId: ID!): DeleteMutationResponse
  deleteReviewWorkflowsWorkflow(documentId: ID!): DeleteMutationResponse
  deleteReviewWorkflowsWorkflowStage(documentId: ID!): DeleteMutationResponse
  deleteUploadFile(id: ID!): UploadFile

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateAbout(data: AboutInput!, status: PublicationStatus = PUBLISHED): About
  updateGlobal(data: GlobalInput!, status: PublicationStatus = PUBLISHED): Global
  updateHealthReason(
    data: HealthReasonInput!
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
    status: PublicationStatus = PUBLISHED
  ): HealthReason
  updateInfoBox(
    data: InfoBoxInput!
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
    status: PublicationStatus = PUBLISHED
  ): InfoBox
  updateIngredient(
    data: IngredientInput!
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
    status: PublicationStatus = PUBLISHED
  ): Ingredient
  updateIntolerance(
    data: IntoleranceInput!
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
    status: PublicationStatus = PUBLISHED
  ): Intolerance
  updateLocalHero(data: LocalHeroInput!, documentId: ID!, status: PublicationStatus = PUBLISHED): LocalHero
  updateLocation(
    data: LocationInput!
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
    status: PublicationStatus = PUBLISHED
  ): Location
  updatePartner(
    data: PartnerInput!
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
    status: PublicationStatus = PUBLISHED
  ): Partner
  updateRecipe(
    data: RecipeInput!
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
    status: PublicationStatus = PUBLISHED
  ): Recipe
  updateRegion(data: RegionInput!, documentId: ID!, status: PublicationStatus = PUBLISHED): Region
  updateReviewWorkflowsWorkflow(data: ReviewWorkflowsWorkflowInput!, documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflow
  updateReviewWorkflowsWorkflowStage(data: ReviewWorkflowsWorkflowStageInput!, documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStage
  updateUploadFile(id: ID!, info: FileInfoInput): UploadFile!

  """Update an existing role"""
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """Update an existing user"""
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

type Partner {
  address: ComponentSharedAddress
  body: JSON
  contact_name: String
  createdAt: DateTime
  documentId: ID!
  local_heroes(filters: LocalHeroFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [LocalHero]!
  local_heroes_connection(filters: LocalHeroFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): LocalHeroRelationResponseCollection
  locale: String
  localizations(filters: PartnerFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Partner]!
  localizations_connection(filters: PartnerFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): PartnerRelationResponseCollection
  location: JSON
  locations(filters: LocationFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Location]!
  locations_connection(filters: LocationFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): LocationRelationResponseCollection
  name: String!
  publishedAt: DateTime
  reserve_href: String
  type: ENUM_PARTNER_TYPE!
  updatedAt: DateTime
  website_href: String
}

type PartnerEntity {
  attributes: Partner
  id: ID
}

type PartnerEntityResponse {
  data: Partner
}

type PartnerEntityResponseCollection {
  nodes: [Partner!]!
  pageInfo: Pagination!
}

input PartnerFiltersInput {
  address: ComponentSharedAddressFiltersInput
  and: [PartnerFiltersInput]
  body: JSONFilterInput
  contact_name: StringFilterInput
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  local_heroes: LocalHeroFiltersInput
  locale: StringFilterInput
  localizations: PartnerFiltersInput
  location: JSONFilterInput
  locations: LocationFiltersInput
  name: StringFilterInput
  not: PartnerFiltersInput
  or: [PartnerFiltersInput]
  publishedAt: DateTimeFilterInput
  reserve_href: StringFilterInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  website_href: StringFilterInput
}

input PartnerInput {
  address: ComponentSharedAddressInput
  body: JSON
  contact_name: String
  local_heroes: [ID]
  location: JSON
  locations: [ID]
  name: String
  publishedAt: DateTime
  reserve_href: String
  type: ENUM_PARTNER_TYPE
  website_href: String
}

type PartnerRelationResponseCollection {
  nodes: [Partner!]!
}

enum PublicationStatus {
  DRAFT
  PUBLISHED
}

type Query {
  about(status: PublicationStatus = PUBLISHED): About
  global(status: PublicationStatus = PUBLISHED): Global
  healthReason(
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
    status: PublicationStatus = PUBLISHED
  ): HealthReason
  healthReasons(
    filters: HealthReasonFiltersInput

    """The locale to use for the query"""
    locale: I18NLocaleCode
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): [HealthReason]!
  healthReasons_connection(
    filters: HealthReasonFiltersInput

    """The locale to use for the query"""
    locale: I18NLocaleCode
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): HealthReasonEntityResponseCollection
  i18NLocale(documentId: ID!, status: PublicationStatus = PUBLISHED): I18NLocale
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [I18NLocale]!
  i18NLocales_connection(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): I18NLocaleEntityResponseCollection
  infoBox(
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
    status: PublicationStatus = PUBLISHED
  ): InfoBox
  infoBoxes(
    filters: InfoBoxFiltersInput

    """The locale to use for the query"""
    locale: I18NLocaleCode
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): [InfoBox]!
  infoBoxes_connection(
    filters: InfoBoxFiltersInput

    """The locale to use for the query"""
    locale: I18NLocaleCode
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): InfoBoxEntityResponseCollection
  ingredient(
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
    status: PublicationStatus = PUBLISHED
  ): Ingredient
  ingredientSeasonalTotals: SeasonalTotals!
  ingredients(
    filters: IngredientFiltersInput

    """The locale to use for the query"""
    locale: I18NLocaleCode
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): [Ingredient]!
  ingredients_connection(
    filters: IngredientFiltersInput

    """The locale to use for the query"""
    locale: I18NLocaleCode
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): IngredientEntityResponseCollection
  intolerance(
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
    status: PublicationStatus = PUBLISHED
  ): Intolerance
  intolerances(
    filters: IntoleranceFiltersInput

    """The locale to use for the query"""
    locale: I18NLocaleCode
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): [Intolerance]!
  intolerances_connection(
    filters: IntoleranceFiltersInput

    """The locale to use for the query"""
    locale: I18NLocaleCode
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): IntoleranceEntityResponseCollection
  localHero(documentId: ID!, status: PublicationStatus = PUBLISHED): LocalHero
  localHeroes(filters: LocalHeroFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [LocalHero]!
  localHeroes_connection(filters: LocalHeroFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): LocalHeroEntityResponseCollection
  location(
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
    status: PublicationStatus = PUBLISHED
  ): Location
  locations(
    filters: LocationFiltersInput

    """The locale to use for the query"""
    locale: I18NLocaleCode
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): [Location]!
  locations_connection(
    filters: LocationFiltersInput

    """The locale to use for the query"""
    locale: I18NLocaleCode
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): LocationEntityResponseCollection
  me: UsersPermissionsMe
  now: SimpleResponse!
  partner(
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
    status: PublicationStatus = PUBLISHED
  ): Partner
  partners(
    filters: PartnerFiltersInput

    """The locale to use for the query"""
    locale: I18NLocaleCode
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): [Partner]!
  partners_connection(
    filters: PartnerFiltersInput

    """The locale to use for the query"""
    locale: I18NLocaleCode
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): PartnerEntityResponseCollection
  recipe(
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
    status: PublicationStatus = PUBLISHED
  ): Recipe
  recipes(
    filters: RecipeFiltersInput

    """The locale to use for the query"""
    locale: I18NLocaleCode
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): [Recipe]!
  recipes_connection(
    filters: RecipeFiltersInput

    """The locale to use for the query"""
    locale: I18NLocaleCode
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): RecipeEntityResponseCollection
  region(documentId: ID!, status: PublicationStatus = PUBLISHED): Region
  regions(filters: RegionFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [Region]!
  regions_connection(filters: RegionFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): RegionEntityResponseCollection
  reviewWorkflowsWorkflow(documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflow
  reviewWorkflowsWorkflowStage(documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStage
  reviewWorkflowsWorkflowStages(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [ReviewWorkflowsWorkflowStage]!
  reviewWorkflowsWorkflowStages_connection(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStageEntityResponseCollection
  reviewWorkflowsWorkflows(filters: ReviewWorkflowsWorkflowFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [ReviewWorkflowsWorkflow]!
  reviewWorkflowsWorkflows_connection(filters: ReviewWorkflowsWorkflowFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowEntityResponseCollection
  seasonalIngredients(month: String!): [Ingredient]!
  uploadFile(documentId: ID!, status: PublicationStatus = PUBLISHED): UploadFile
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UploadFile]!
  uploadFiles_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UploadFileEntityResponseCollection
  usersPermissionsRole(documentId: ID!, status: PublicationStatus = PUBLISHED): UsersPermissionsRole
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UsersPermissionsRole]!
  usersPermissionsRoles_connection(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(documentId: ID!, status: PublicationStatus = PUBLISHED): UsersPermissionsUser
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UsersPermissionsUser]!
  usersPermissionsUsers_connection(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UsersPermissionsUserEntityResponseCollection
}

type Recipe {
  body: JSON
  createdAt: DateTime
  documentId: ID!
  instructions(filters: ComponentSharedCookingInstructionsFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSharedCookingInstructions]
  locale: String
  localizations(filters: RecipeFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Recipe]!
  localizations_connection(filters: RecipeFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): RecipeRelationResponseCollection
  main_ingredient: Ingredient
  publishedAt: DateTime
  title: String!
  updatedAt: DateTime
}

type RecipeEntity {
  attributes: Recipe
  id: ID
}

type RecipeEntityResponse {
  data: Recipe
}

type RecipeEntityResponseCollection {
  nodes: [Recipe!]!
  pageInfo: Pagination!
}

input RecipeFiltersInput {
  and: [RecipeFiltersInput]
  body: JSONFilterInput
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  instructions: ComponentSharedCookingInstructionsFiltersInput
  locale: StringFilterInput
  localizations: RecipeFiltersInput
  main_ingredient: IngredientFiltersInput
  not: RecipeFiltersInput
  or: [RecipeFiltersInput]
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input RecipeInput {
  body: JSON
  instructions: [ComponentSharedCookingInstructionsInput]
  main_ingredient: ID
  publishedAt: DateTime
  title: String
}

type RecipeRelationResponseCollection {
  nodes: [Recipe!]!
}

type Region {
  createdAt: DateTime
  documentId: ID!
  location: JSON
  name: String
  publishedAt: DateTime
  type: ENUM_REGION_TYPE
  updatedAt: DateTime
  website_url: String
}

type RegionEntity {
  attributes: Region
  id: ID
}

type RegionEntityResponse {
  data: Region
}

type RegionEntityResponseCollection {
  nodes: [Region!]!
  pageInfo: Pagination!
}

input RegionFiltersInput {
  and: [RegionFiltersInput]
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  location: JSONFilterInput
  name: StringFilterInput
  not: RegionFiltersInput
  or: [RegionFiltersInput]
  publishedAt: DateTimeFilterInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  website_url: StringFilterInput
}

input RegionInput {
  location: JSON
  name: String
  publishedAt: DateTime
  type: ENUM_REGION_TYPE
  website_url: String
}

type RegionRelationResponseCollection {
  nodes: [Region!]!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

type ReviewWorkflowsWorkflow {
  contentTypes: JSON!
  createdAt: DateTime
  documentId: ID!
  name: String!
  publishedAt: DateTime
  stageRequiredToPublish: ReviewWorkflowsWorkflowStage
  stages(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ReviewWorkflowsWorkflowStage]!
  stages_connection(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ReviewWorkflowsWorkflowStageRelationResponseCollection
  updatedAt: DateTime
}

type ReviewWorkflowsWorkflowEntity {
  attributes: ReviewWorkflowsWorkflow
  id: ID
}

type ReviewWorkflowsWorkflowEntityResponse {
  data: ReviewWorkflowsWorkflow
}

type ReviewWorkflowsWorkflowEntityResponseCollection {
  nodes: [ReviewWorkflowsWorkflow!]!
  pageInfo: Pagination!
}

input ReviewWorkflowsWorkflowFiltersInput {
  and: [ReviewWorkflowsWorkflowFiltersInput]
  contentTypes: JSONFilterInput
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  name: StringFilterInput
  not: ReviewWorkflowsWorkflowFiltersInput
  or: [ReviewWorkflowsWorkflowFiltersInput]
  publishedAt: DateTimeFilterInput
  stageRequiredToPublish: ReviewWorkflowsWorkflowStageFiltersInput
  stages: ReviewWorkflowsWorkflowStageFiltersInput
  updatedAt: DateTimeFilterInput
}

input ReviewWorkflowsWorkflowInput {
  contentTypes: JSON
  name: String
  publishedAt: DateTime
  stageRequiredToPublish: ID
  stages: [ID]
}

type ReviewWorkflowsWorkflowRelationResponseCollection {
  nodes: [ReviewWorkflowsWorkflow!]!
}

type ReviewWorkflowsWorkflowStage {
  color: String
  createdAt: DateTime
  documentId: ID!
  name: String
  publishedAt: DateTime
  updatedAt: DateTime
  workflow: ReviewWorkflowsWorkflow
}

type ReviewWorkflowsWorkflowStageEntity {
  attributes: ReviewWorkflowsWorkflowStage
  id: ID
}

type ReviewWorkflowsWorkflowStageEntityResponse {
  data: ReviewWorkflowsWorkflowStage
}

type ReviewWorkflowsWorkflowStageEntityResponseCollection {
  nodes: [ReviewWorkflowsWorkflowStage!]!
  pageInfo: Pagination!
}

input ReviewWorkflowsWorkflowStageFiltersInput {
  and: [ReviewWorkflowsWorkflowStageFiltersInput]
  color: StringFilterInput
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  name: StringFilterInput
  not: ReviewWorkflowsWorkflowStageFiltersInput
  or: [ReviewWorkflowsWorkflowStageFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  workflow: ReviewWorkflowsWorkflowFiltersInput
}

input ReviewWorkflowsWorkflowStageInput {
  color: String
  name: String
  publishedAt: DateTime
  workflow: ID
}

type ReviewWorkflowsWorkflowStageRelationResponseCollection {
  nodes: [ReviewWorkflowsWorkflowStage!]!
}

type SeasonalTotals {
  april: Int!
  august: Int!
  december: Int!
  february: Int!
  january: Int!
  july: Int!
  june: Int!
  march: Int!
  may: Int!
  november: Int!
  october: Int!
  september: Int!
}

type SimpleResponse {
  timestamp: String!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nei: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

"""A time string with format HH:mm:ss.SSS"""
scalar Time

input TimeFilterInput {
  and: [Time]
  between: [Time]
  contains: Time
  containsi: Time
  endsWith: Time
  eq: Time
  eqi: Time
  gt: Time
  gte: Time
  in: [Time]
  lt: Time
  lte: Time
  ne: Time
  nei: Time
  not: TimeFilterInput
  notContains: Time
  notContainsi: Time
  notIn: [Time]
  notNull: Boolean
  null: Boolean
  or: [Time]
  startsWith: Time
}

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  documentId: ID!
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  publishedAt: DateTime
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFile
}

type UploadFileEntityResponseCollection {
  nodes: [UploadFile!]!
  pageInfo: Pagination!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  ext: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  publishedAt: DateTimeFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  publishedAt: DateTime
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  nodes: [UploadFile!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  documentId: ID!
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  documentId: ID!
  publishedAt: DateTime
  role: UsersPermissionsRole
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

type UsersPermissionsPermissionEntityResponse {
  data: UsersPermissionsPermission
}

type UsersPermissionsPermissionEntityResponseCollection {
  nodes: [UsersPermissionsPermission!]!
  pageInfo: Pagination!
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  publishedAt: DateTimeFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

input UsersPermissionsPermissionInput {
  action: String
  publishedAt: DateTime
  role: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
  nodes: [UsersPermissionsPermission!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  documentId: ID!
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UsersPermissionsPermission]!
  permissions_connection(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  publishedAt: DateTime
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UsersPermissionsUser]!
  users_connection(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRole
}

type UsersPermissionsRoleEntityResponseCollection {
  nodes: [UsersPermissionsRole!]!
  pageInfo: Pagination!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  documentId: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  publishedAt: DateTimeFilterInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  publishedAt: DateTime
  type: String
  users: [ID]
}

type UsersPermissionsRoleRelationResponseCollection {
  nodes: [UsersPermissionsRole!]!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  documentId: ID!
  email: String!
  favorite_ingredients(filters: IngredientFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Ingredient]!
  favorite_ingredients_connection(filters: IngredientFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): IngredientRelationResponseCollection
  provider: String
  publishedAt: DateTime
  role: UsersPermissionsRole
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponseCollection {
  nodes: [UsersPermissionsUser!]!
  pageInfo: Pagination!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  email: StringFilterInput
  favorite_ingredients: IngredientFiltersInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  provider: StringFilterInput
  publishedAt: DateTimeFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmed: Boolean
  email: String
  favorite_ingredients: [ID]
  password: String
  provider: String
  publishedAt: DateTime
  role: ID
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  nodes: [UsersPermissionsUser!]!
}